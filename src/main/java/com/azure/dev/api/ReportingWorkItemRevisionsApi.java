/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api;

import com.azure.dev.api.ApiCallback;
import com.azure.dev.api.ApiClient;
import com.azure.dev.api.ApiException;
import com.azure.dev.api.ApiResponse;
import com.azure.dev.api.Configuration;
import com.azure.dev.api.Pair;
import com.azure.dev.api.ProgressRequestBody;
import com.azure.dev.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import com.azure.dev.api.model.ReportingWorkItemRevisionsBatch;
import com.azure.dev.api.model.ReportingWorkItemRevisionsFilter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingWorkItemRevisionsApi {
    private ApiClient localVarApiClient;

    public ReportingWorkItemRevisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingWorkItemRevisionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for reportingWorkItemRevisionsReadReportingRevisionsGet
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param fields A list of fields to return in work item revisions. Omit this parameter to get all reportable fields. (optional)
     * @param types A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types. (optional)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param includeIdentityRef Return an identity reference instead of a string value for identity fields. (optional)
     * @param includeDeleted Specify if the deleted item should be returned. (optional)
     * @param includeTagRef Specify if the tag objects should be returned for System.Tags field. (optional)
     * @param includeLatestOnly Return only the latest revisions of work items, skipping all historical revisions (optional)
     * @param $expand Return all the fields in work item revisions, including long text fields which are not returned by default (optional)
     * @param includeDiscussionChangesOnly Return only the those revisions of work items, where only history field was changed (optional)
     * @param $maxPageSize The maximum number of results to return in this batch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingWorkItemRevisionsReadReportingRevisionsGetCall(String organization, String project, String apiVersion, String fields, String types, String continuationToken, OffsetDateTime startDateTime, Boolean includeIdentityRef, Boolean includeDeleted, Boolean includeTagRef, Boolean includeLatestOnly, String $expand, Boolean includeDiscussionChangesOnly, Integer $maxPageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/reporting/workitemrevisions"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (includeIdentityRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeIdentityRef", includeIdentityRef));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        if (includeTagRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTagRef", includeTagRef));
        }

        if (includeLatestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLatestOnly", includeLatestOnly));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (includeDiscussionChangesOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDiscussionChangesOnly", includeDiscussionChangesOnly));
        }

        if ($maxPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$maxPageSize", $maxPageSize));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingWorkItemRevisionsReadReportingRevisionsGetValidateBeforeCall(String organization, String project, String apiVersion, String fields, String types, String continuationToken, OffsetDateTime startDateTime, Boolean includeIdentityRef, Boolean includeDeleted, Boolean includeTagRef, Boolean includeLatestOnly, String $expand, Boolean includeDiscussionChangesOnly, Integer $maxPageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling reportingWorkItemRevisionsReadReportingRevisionsGet(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling reportingWorkItemRevisionsReadReportingRevisionsGet(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reportingWorkItemRevisionsReadReportingRevisionsGet(Async)");
        }
        

        okhttp3.Call localVarCall = reportingWorkItemRevisionsReadReportingRevisionsGetCall(organization, project, apiVersion, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, includeLatestOnly, $expand, includeDiscussionChangesOnly, $maxPageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a batch of work item revisions with the option of including deleted items
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param fields A list of fields to return in work item revisions. Omit this parameter to get all reportable fields. (optional)
     * @param types A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types. (optional)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param includeIdentityRef Return an identity reference instead of a string value for identity fields. (optional)
     * @param includeDeleted Specify if the deleted item should be returned. (optional)
     * @param includeTagRef Specify if the tag objects should be returned for System.Tags field. (optional)
     * @param includeLatestOnly Return only the latest revisions of work items, skipping all historical revisions (optional)
     * @param $expand Return all the fields in work item revisions, including long text fields which are not returned by default (optional)
     * @param includeDiscussionChangesOnly Return only the those revisions of work items, where only history field was changed (optional)
     * @param $maxPageSize The maximum number of results to return in this batch (optional)
     * @return ReportingWorkItemRevisionsBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ReportingWorkItemRevisionsBatch reportingWorkItemRevisionsReadReportingRevisionsGet(String organization, String project, String apiVersion, String fields, String types, String continuationToken, OffsetDateTime startDateTime, Boolean includeIdentityRef, Boolean includeDeleted, Boolean includeTagRef, Boolean includeLatestOnly, String $expand, Boolean includeDiscussionChangesOnly, Integer $maxPageSize) throws ApiException {
        ApiResponse<ReportingWorkItemRevisionsBatch> localVarResp = reportingWorkItemRevisionsReadReportingRevisionsGetWithHttpInfo(organization, project, apiVersion, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, includeLatestOnly, $expand, includeDiscussionChangesOnly, $maxPageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a batch of work item revisions with the option of including deleted items
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param fields A list of fields to return in work item revisions. Omit this parameter to get all reportable fields. (optional)
     * @param types A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types. (optional)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param includeIdentityRef Return an identity reference instead of a string value for identity fields. (optional)
     * @param includeDeleted Specify if the deleted item should be returned. (optional)
     * @param includeTagRef Specify if the tag objects should be returned for System.Tags field. (optional)
     * @param includeLatestOnly Return only the latest revisions of work items, skipping all historical revisions (optional)
     * @param $expand Return all the fields in work item revisions, including long text fields which are not returned by default (optional)
     * @param includeDiscussionChangesOnly Return only the those revisions of work items, where only history field was changed (optional)
     * @param $maxPageSize The maximum number of results to return in this batch (optional)
     * @return ApiResponse&lt;ReportingWorkItemRevisionsBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingWorkItemRevisionsBatch> reportingWorkItemRevisionsReadReportingRevisionsGetWithHttpInfo(String organization, String project, String apiVersion, String fields, String types, String continuationToken, OffsetDateTime startDateTime, Boolean includeIdentityRef, Boolean includeDeleted, Boolean includeTagRef, Boolean includeLatestOnly, String $expand, Boolean includeDiscussionChangesOnly, Integer $maxPageSize) throws ApiException {
        okhttp3.Call localVarCall = reportingWorkItemRevisionsReadReportingRevisionsGetValidateBeforeCall(organization, project, apiVersion, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, includeLatestOnly, $expand, includeDiscussionChangesOnly, $maxPageSize, null);
        Type localVarReturnType = new TypeToken<ReportingWorkItemRevisionsBatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a batch of work item revisions with the option of including deleted items
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param fields A list of fields to return in work item revisions. Omit this parameter to get all reportable fields. (optional)
     * @param types A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types. (optional)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param includeIdentityRef Return an identity reference instead of a string value for identity fields. (optional)
     * @param includeDeleted Specify if the deleted item should be returned. (optional)
     * @param includeTagRef Specify if the tag objects should be returned for System.Tags field. (optional)
     * @param includeLatestOnly Return only the latest revisions of work items, skipping all historical revisions (optional)
     * @param $expand Return all the fields in work item revisions, including long text fields which are not returned by default (optional)
     * @param includeDiscussionChangesOnly Return only the those revisions of work items, where only history field was changed (optional)
     * @param $maxPageSize The maximum number of results to return in this batch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingWorkItemRevisionsReadReportingRevisionsGetAsync(String organization, String project, String apiVersion, String fields, String types, String continuationToken, OffsetDateTime startDateTime, Boolean includeIdentityRef, Boolean includeDeleted, Boolean includeTagRef, Boolean includeLatestOnly, String $expand, Boolean includeDiscussionChangesOnly, Integer $maxPageSize, final ApiCallback<ReportingWorkItemRevisionsBatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingWorkItemRevisionsReadReportingRevisionsGetValidateBeforeCall(organization, project, apiVersion, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, includeLatestOnly, $expand, includeDiscussionChangesOnly, $maxPageSize, _callback);
        Type localVarReturnType = new TypeToken<ReportingWorkItemRevisionsBatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingWorkItemRevisionsReadReportingRevisionsPost
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body An object that contains request settings: field filter, type filter, identity format (required)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param $expand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingWorkItemRevisionsReadReportingRevisionsPostCall(String organization, String project, String apiVersion, ReportingWorkItemRevisionsFilter body, String continuationToken, OffsetDateTime startDateTime, String $expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/reporting/workitemrevisions"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingWorkItemRevisionsReadReportingRevisionsPostValidateBeforeCall(String organization, String project, String apiVersion, ReportingWorkItemRevisionsFilter body, String continuationToken, OffsetDateTime startDateTime, String $expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling reportingWorkItemRevisionsReadReportingRevisionsPost(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling reportingWorkItemRevisionsReadReportingRevisionsPost(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reportingWorkItemRevisionsReadReportingRevisionsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reportingWorkItemRevisionsReadReportingRevisionsPost(Async)");
        }
        

        okhttp3.Call localVarCall = reportingWorkItemRevisionsReadReportingRevisionsPostCall(organization, project, apiVersion, body, continuationToken, startDateTime, $expand, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body An object that contains request settings: field filter, type filter, identity format (required)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param $expand  (optional)
     * @return ReportingWorkItemRevisionsBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ReportingWorkItemRevisionsBatch reportingWorkItemRevisionsReadReportingRevisionsPost(String organization, String project, String apiVersion, ReportingWorkItemRevisionsFilter body, String continuationToken, OffsetDateTime startDateTime, String $expand) throws ApiException {
        ApiResponse<ReportingWorkItemRevisionsBatch> localVarResp = reportingWorkItemRevisionsReadReportingRevisionsPostWithHttpInfo(organization, project, apiVersion, body, continuationToken, startDateTime, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body An object that contains request settings: field filter, type filter, identity format (required)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param $expand  (optional)
     * @return ApiResponse&lt;ReportingWorkItemRevisionsBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingWorkItemRevisionsBatch> reportingWorkItemRevisionsReadReportingRevisionsPostWithHttpInfo(String organization, String project, String apiVersion, ReportingWorkItemRevisionsFilter body, String continuationToken, OffsetDateTime startDateTime, String $expand) throws ApiException {
        okhttp3.Call localVarCall = reportingWorkItemRevisionsReadReportingRevisionsPostValidateBeforeCall(organization, project, apiVersion, body, continuationToken, startDateTime, $expand, null);
        Type localVarReturnType = new TypeToken<ReportingWorkItemRevisionsBatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body An object that contains request settings: field filter, type filter, identity format (required)
     * @param continuationToken Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions. (optional)
     * @param startDateTime Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with &#39;watermark&#39; parameter. (optional)
     * @param $expand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingWorkItemRevisionsReadReportingRevisionsPostAsync(String organization, String project, String apiVersion, ReportingWorkItemRevisionsFilter body, String continuationToken, OffsetDateTime startDateTime, String $expand, final ApiCallback<ReportingWorkItemRevisionsBatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingWorkItemRevisionsReadReportingRevisionsPostValidateBeforeCall(organization, project, apiVersion, body, continuationToken, startDateTime, $expand, _callback);
        Type localVarReturnType = new TypeToken<ReportingWorkItemRevisionsBatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
