/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api;

import com.azure.dev.api.ApiCallback;
import com.azure.dev.api.ApiClient;
import com.azure.dev.api.ApiException;
import com.azure.dev.api.ApiResponse;
import com.azure.dev.api.Configuration;
import com.azure.dev.api.Pair;
import com.azure.dev.api.ProgressRequestBody;
import com.azure.dev.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.azure.dev.api.model.Comment;
import com.azure.dev.api.model.CommentCreate;
import com.azure.dev.api.model.CommentList;
import com.azure.dev.api.model.CommentUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommentsApi {
    private ApiClient localVarApiClient;

    public CommentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for commentsAdd
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment create request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsAddCall(String organization, String project, Integer workItemId, String apiVersion, CommentCreate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "workItemId" + "\\}", localVarApiClient.escapeString(workItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentsAddValidateBeforeCall(String organization, String project, Integer workItemId, String apiVersion, CommentCreate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling commentsAdd(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling commentsAdd(Async)");
        }
        
        // verify the required parameter 'workItemId' is set
        if (workItemId == null) {
            throw new ApiException("Missing the required parameter 'workItemId' when calling commentsAdd(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commentsAdd(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling commentsAdd(Async)");
        }
        

        okhttp3.Call localVarCall = commentsAddCall(organization, project, workItemId, apiVersion, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment create request. (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Comment commentsAdd(String organization, String project, Integer workItemId, String apiVersion, CommentCreate body) throws ApiException {
        ApiResponse<Comment> localVarResp = commentsAddWithHttpInfo(organization, project, workItemId, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment create request. (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> commentsAddWithHttpInfo(String organization, String project, Integer workItemId, String apiVersion, CommentCreate body) throws ApiException {
        okhttp3.Call localVarCall = commentsAddValidateBeforeCall(organization, project, workItemId, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment create request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsAddAsync(String organization, String project, Integer workItemId, String apiVersion, CommentCreate body, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentsAddValidateBeforeCall(organization, project, workItemId, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commentsDelete
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsDeleteCall(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "workItemId" + "\\}", localVarApiClient.escapeString(workItemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentsDeleteValidateBeforeCall(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling commentsDelete(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling commentsDelete(Async)");
        }
        
        // verify the required parameter 'workItemId' is set
        if (workItemId == null) {
            throw new ApiException("Missing the required parameter 'workItemId' when calling commentsDelete(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling commentsDelete(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commentsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = commentsDeleteCall(organization, project, workItemId, commentId, apiVersion, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void commentsDelete(String organization, String project, Integer workItemId, Integer commentId, String apiVersion) throws ApiException {
        commentsDeleteWithHttpInfo(organization, project, workItemId, commentId, apiVersion);
    }

    /**
     * 
     * Delete a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commentsDeleteWithHttpInfo(String organization, String project, Integer workItemId, Integer commentId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = commentsDeleteValidateBeforeCall(organization, project, workItemId, commentId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsDeleteAsync(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentsDeleteValidateBeforeCall(organization, project, workItemId, commentId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commentsGetComment
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get the comment. (required)
     * @param commentId Id of the comment to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comment should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsGetCommentCall(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, Boolean includeDeleted, String $expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "workItemId" + "\\}", localVarApiClient.escapeString(workItemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentsGetCommentValidateBeforeCall(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, Boolean includeDeleted, String $expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling commentsGetComment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling commentsGetComment(Async)");
        }
        
        // verify the required parameter 'workItemId' is set
        if (workItemId == null) {
            throw new ApiException("Missing the required parameter 'workItemId' when calling commentsGetComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling commentsGetComment(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commentsGetComment(Async)");
        }
        

        okhttp3.Call localVarCall = commentsGetCommentCall(organization, project, workItemId, commentId, apiVersion, includeDeleted, $expand, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a work item comment.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get the comment. (required)
     * @param commentId Id of the comment to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comment should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Comment commentsGetComment(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, Boolean includeDeleted, String $expand) throws ApiException {
        ApiResponse<Comment> localVarResp = commentsGetCommentWithHttpInfo(organization, project, workItemId, commentId, apiVersion, includeDeleted, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a work item comment.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get the comment. (required)
     * @param commentId Id of the comment to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comment should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> commentsGetCommentWithHttpInfo(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, Boolean includeDeleted, String $expand) throws ApiException {
        okhttp3.Call localVarCall = commentsGetCommentValidateBeforeCall(organization, project, workItemId, commentId, apiVersion, includeDeleted, $expand, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a work item comment.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get the comment. (required)
     * @param commentId Id of the comment to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comment should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsGetCommentAsync(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, Boolean includeDeleted, String $expand, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentsGetCommentValidateBeforeCall(organization, project, workItemId, commentId, apiVersion, includeDeleted, $expand, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commentsGetCommentsBatch
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get comments for. (required)
     * @param ids Comma-separated list of comment ids to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comments should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsGetCommentsBatchCall(String organization, String project, Integer workItemId, String ids, String apiVersion, Boolean includeDeleted, String $expand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "workItemId" + "\\}", localVarApiClient.escapeString(workItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentsGetCommentsBatchValidateBeforeCall(String organization, String project, Integer workItemId, String ids, String apiVersion, Boolean includeDeleted, String $expand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling commentsGetCommentsBatch(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling commentsGetCommentsBatch(Async)");
        }
        
        // verify the required parameter 'workItemId' is set
        if (workItemId == null) {
            throw new ApiException("Missing the required parameter 'workItemId' when calling commentsGetCommentsBatch(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling commentsGetCommentsBatch(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commentsGetCommentsBatch(Async)");
        }
        

        okhttp3.Call localVarCall = commentsGetCommentsBatchCall(organization, project, workItemId, ids, apiVersion, includeDeleted, $expand, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a list of work item comments by ids.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get comments for. (required)
     * @param ids Comma-separated list of comment ids to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comments should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @return CommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CommentList commentsGetCommentsBatch(String organization, String project, Integer workItemId, String ids, String apiVersion, Boolean includeDeleted, String $expand) throws ApiException {
        ApiResponse<CommentList> localVarResp = commentsGetCommentsBatchWithHttpInfo(organization, project, workItemId, ids, apiVersion, includeDeleted, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of work item comments by ids.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get comments for. (required)
     * @param ids Comma-separated list of comment ids to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comments should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @return ApiResponse&lt;CommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentList> commentsGetCommentsBatchWithHttpInfo(String organization, String project, Integer workItemId, String ids, String apiVersion, Boolean includeDeleted, String $expand) throws ApiException {
        okhttp3.Call localVarCall = commentsGetCommentsBatchValidateBeforeCall(organization, project, workItemId, ids, apiVersion, includeDeleted, $expand, null);
        Type localVarReturnType = new TypeToken<CommentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of work item comments by ids.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item to get comments for. (required)
     * @param ids Comma-separated list of comment ids to return. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param includeDeleted Specify if the deleted comments should be retrieved. (optional)
     * @param $expand Specifies the additional data retrieval options for work item comments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsGetCommentsBatchAsync(String organization, String project, Integer workItemId, String ids, String apiVersion, Boolean includeDeleted, String $expand, final ApiCallback<CommentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentsGetCommentsBatchValidateBeforeCall(organization, project, workItemId, ids, apiVersion, includeDeleted, $expand, _callback);
        Type localVarReturnType = new TypeToken<CommentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commentsUpdate
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment update request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsUpdateCall(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, CommentUpdate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "workItemId" + "\\}", localVarApiClient.escapeString(workItemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentsUpdateValidateBeforeCall(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, CommentUpdate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling commentsUpdate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling commentsUpdate(Async)");
        }
        
        // verify the required parameter 'workItemId' is set
        if (workItemId == null) {
            throw new ApiException("Missing the required parameter 'workItemId' when calling commentsUpdate(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling commentsUpdate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling commentsUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling commentsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = commentsUpdateCall(organization, project, workItemId, commentId, apiVersion, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment update request. (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Comment commentsUpdate(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, CommentUpdate body) throws ApiException {
        ApiResponse<Comment> localVarResp = commentsUpdateWithHttpInfo(organization, project, workItemId, commentId, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment update request. (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> commentsUpdateWithHttpInfo(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, CommentUpdate body) throws ApiException {
        okhttp3.Call localVarCall = commentsUpdateValidateBeforeCall(organization, project, workItemId, commentId, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a comment on a work item.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param workItemId Id of a work item. (required)
     * @param commentId  (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.3&#39; to use this version of the api. (required)
     * @param body Comment update request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commentsUpdateAsync(String organization, String project, Integer workItemId, Integer commentId, String apiVersion, CommentUpdate body, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentsUpdateValidateBeforeCall(organization, project, workItemId, commentId, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
