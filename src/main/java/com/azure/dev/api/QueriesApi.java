/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api;

import com.azure.dev.api.ApiCallback;
import com.azure.dev.api.ApiClient;
import com.azure.dev.api.ApiException;
import com.azure.dev.api.ApiResponse;
import com.azure.dev.api.Configuration;
import com.azure.dev.api.Pair;
import com.azure.dev.api.ProgressRequestBody;
import com.azure.dev.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.azure.dev.api.model.QueryBatchGetRequest;
import com.azure.dev.api.model.QueryHierarchyItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueriesApi {
    private ApiClient localVarApiClient;

    public QueriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for queriesCreate
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The parent id or path under which the query is to be created. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to create. (required)
     * @param validateWiqlOnly If you only want to validate your WIQL query without actually creating one, set it to true. Default is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesCreateCall(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean validateWiqlOnly, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/queries/{query}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "query" + "\\}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validateWiqlOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateWiqlOnly", validateWiqlOnly));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesCreateValidateBeforeCall(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean validateWiqlOnly, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling queriesCreate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling queriesCreate(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queriesCreate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesCreate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queriesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = queriesCreateCall(organization, project, query, apiVersion, body, validateWiqlOnly, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a query, or moves a query.  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc&#x3D;/vsts/work/track/toc.json&amp;bc&#x3D;/vsts/work/track/breadcrumb/toc.json&amp;view&#x3D;vsts).
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The parent id or path under which the query is to be created. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to create. (required)
     * @param validateWiqlOnly If you only want to validate your WIQL query without actually creating one, set it to true. Default is false. (optional)
     * @return QueryHierarchyItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public QueryHierarchyItem queriesCreate(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean validateWiqlOnly) throws ApiException {
        ApiResponse<QueryHierarchyItem> localVarResp = queriesCreateWithHttpInfo(organization, project, query, apiVersion, body, validateWiqlOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a query, or moves a query.  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc&#x3D;/vsts/work/track/toc.json&amp;bc&#x3D;/vsts/work/track/breadcrumb/toc.json&amp;view&#x3D;vsts).
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The parent id or path under which the query is to be created. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to create. (required)
     * @param validateWiqlOnly If you only want to validate your WIQL query without actually creating one, set it to true. Default is false. (optional)
     * @return ApiResponse&lt;QueryHierarchyItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryHierarchyItem> queriesCreateWithHttpInfo(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean validateWiqlOnly) throws ApiException {
        okhttp3.Call localVarCall = queriesCreateValidateBeforeCall(organization, project, query, apiVersion, body, validateWiqlOnly, null);
        Type localVarReturnType = new TypeToken<QueryHierarchyItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a query, or moves a query.  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc&#x3D;/vsts/work/track/toc.json&amp;bc&#x3D;/vsts/work/track/breadcrumb/toc.json&amp;view&#x3D;vsts).
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The parent id or path under which the query is to be created. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to create. (required)
     * @param validateWiqlOnly If you only want to validate your WIQL query without actually creating one, set it to true. Default is false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesCreateAsync(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean validateWiqlOnly, final ApiCallback<QueryHierarchyItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesCreateValidateBeforeCall(organization, project, query, apiVersion, body, validateWiqlOnly, _callback);
        Type localVarReturnType = new TypeToken<QueryHierarchyItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesDelete
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query or folder to delete. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesDeleteCall(String organization, String project, String query, String apiVersion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/queries/{query}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "query" + "\\}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesDeleteValidateBeforeCall(String organization, String project, String query, String apiVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling queriesDelete(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling queriesDelete(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queriesDelete(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = queriesDeleteCall(organization, project, query, apiVersion, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query or folder to delete. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void queriesDelete(String organization, String project, String query, String apiVersion) throws ApiException {
        queriesDeleteWithHttpInfo(organization, project, query, apiVersion);
    }

    /**
     * 
     * Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query or folder to delete. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queriesDeleteWithHttpInfo(String organization, String project, String query, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = queriesDeleteValidateBeforeCall(organization, project, query, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query or folder to delete. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesDeleteAsync(String organization, String project, String query, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesDeleteValidateBeforeCall(organization, project, query, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesGet
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesGetCall(String organization, String project, String query, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/queries/{query}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "query" + "\\}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$depth", $depth));
        }

        if ($includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$includeDeleted", $includeDeleted));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesGetValidateBeforeCall(String organization, String project, String query, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling queriesGet(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling queriesGet(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queriesGet(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesGet(Async)");
        }
        

        okhttp3.Call localVarCall = queriesGetCall(organization, project, query, apiVersion, $expand, $depth, $includeDeleted, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves an individual query and its children
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @return QueryHierarchyItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public QueryHierarchyItem queriesGet(String organization, String project, String query, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted) throws ApiException {
        ApiResponse<QueryHierarchyItem> localVarResp = queriesGetWithHttpInfo(organization, project, query, apiVersion, $expand, $depth, $includeDeleted);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves an individual query and its children
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @return ApiResponse&lt;QueryHierarchyItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryHierarchyItem> queriesGetWithHttpInfo(String organization, String project, String query, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = queriesGetValidateBeforeCall(organization, project, query, apiVersion, $expand, $depth, $includeDeleted, null);
        Type localVarReturnType = new TypeToken<QueryHierarchyItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves an individual query and its children
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query ID or path of the query. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesGetAsync(String organization, String project, String query, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted, final ApiCallback<QueryHierarchyItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesGetValidateBeforeCall(organization, project, query, apiVersion, $expand, $depth, $includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<QueryHierarchyItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesGetQueriesBatch
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.1&#39; to use this version of the api. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesGetQueriesBatchCall(String organization, String project, String apiVersion, QueryBatchGetRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/queriesbatch"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesGetQueriesBatchValidateBeforeCall(String organization, String project, String apiVersion, QueryBatchGetRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling queriesGetQueriesBatch(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling queriesGetQueriesBatch(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesGetQueriesBatch(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queriesGetQueriesBatch(Async)");
        }
        

        okhttp3.Call localVarCall = queriesGetQueriesBatchCall(organization, project, apiVersion, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a list of queries by ids (Maximum 1000)
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.1&#39; to use this version of the api. (required)
     * @param body  (required)
     * @return List&lt;QueryHierarchyItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<QueryHierarchyItem> queriesGetQueriesBatch(String organization, String project, String apiVersion, QueryBatchGetRequest body) throws ApiException {
        ApiResponse<List<QueryHierarchyItem>> localVarResp = queriesGetQueriesBatchWithHttpInfo(organization, project, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of queries by ids (Maximum 1000)
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.1&#39; to use this version of the api. (required)
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;QueryHierarchyItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<QueryHierarchyItem>> queriesGetQueriesBatchWithHttpInfo(String organization, String project, String apiVersion, QueryBatchGetRequest body) throws ApiException {
        okhttp3.Call localVarCall = queriesGetQueriesBatchValidateBeforeCall(organization, project, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<List<QueryHierarchyItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of queries by ids (Maximum 1000)
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.1&#39; to use this version of the api. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesGetQueriesBatchAsync(String organization, String project, String apiVersion, QueryBatchGetRequest body, final ApiCallback<List<QueryHierarchyItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesGetQueriesBatchValidateBeforeCall(organization, project, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<List<QueryHierarchyItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesList
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesListCall(String organization, String project, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/queries"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$depth", $depth));
        }

        if ($includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$includeDeleted", $includeDeleted));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesListValidateBeforeCall(String organization, String project, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling queriesList(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling queriesList(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesList(Async)");
        }
        

        okhttp3.Call localVarCall = queriesListCall(organization, project, apiVersion, $expand, $depth, $includeDeleted, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the root queries and their children
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @return List&lt;QueryHierarchyItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<QueryHierarchyItem> queriesList(String organization, String project, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted) throws ApiException {
        ApiResponse<List<QueryHierarchyItem>> localVarResp = queriesListWithHttpInfo(organization, project, apiVersion, $expand, $depth, $includeDeleted);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the root queries and their children
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @return ApiResponse&lt;List&lt;QueryHierarchyItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<QueryHierarchyItem>> queriesListWithHttpInfo(String organization, String project, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = queriesListValidateBeforeCall(organization, project, apiVersion, $expand, $depth, $includeDeleted, null);
        Type localVarReturnType = new TypeToken<List<QueryHierarchyItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the root queries and their children
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $expand Include the query string (wiql), clauses, query result columns, and sort options in the results. (optional)
     * @param $depth In the folder of queries, return child queries and folders to this depth. (optional)
     * @param $includeDeleted Include deleted queries and folders (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesListAsync(String organization, String project, String apiVersion, String $expand, Integer $depth, Boolean $includeDeleted, final ApiCallback<List<QueryHierarchyItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesListValidateBeforeCall(organization, project, apiVersion, $expand, $depth, $includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<QueryHierarchyItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesUpdate
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The ID or path for the query to update. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to update. (required)
     * @param $undeleteDescendants Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesUpdateCall(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean $undeleteDescendants, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/queries/{query}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "query" + "\\}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($undeleteDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$undeleteDescendants", $undeleteDescendants));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesUpdateValidateBeforeCall(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean $undeleteDescendants, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling queriesUpdate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling queriesUpdate(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queriesUpdate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queriesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = queriesUpdateCall(organization, project, query, apiVersion, body, $undeleteDescendants, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a query or a folder. This allows you to update, rename and move queries and folders.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The ID or path for the query to update. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to update. (required)
     * @param $undeleteDescendants Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants. (optional)
     * @return QueryHierarchyItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public QueryHierarchyItem queriesUpdate(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean $undeleteDescendants) throws ApiException {
        ApiResponse<QueryHierarchyItem> localVarResp = queriesUpdateWithHttpInfo(organization, project, query, apiVersion, body, $undeleteDescendants);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a query or a folder. This allows you to update, rename and move queries and folders.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The ID or path for the query to update. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to update. (required)
     * @param $undeleteDescendants Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants. (optional)
     * @return ApiResponse&lt;QueryHierarchyItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryHierarchyItem> queriesUpdateWithHttpInfo(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean $undeleteDescendants) throws ApiException {
        okhttp3.Call localVarCall = queriesUpdateValidateBeforeCall(organization, project, query, apiVersion, body, $undeleteDescendants, null);
        Type localVarReturnType = new TypeToken<QueryHierarchyItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a query or a folder. This allows you to update, rename and move queries and folders.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param query The ID or path for the query to update. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body The query to update. (required)
     * @param $undeleteDescendants Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesUpdateAsync(String organization, String project, String query, String apiVersion, QueryHierarchyItem body, Boolean $undeleteDescendants, final ApiCallback<QueryHierarchyItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesUpdateValidateBeforeCall(organization, project, query, apiVersion, body, $undeleteDescendants, _callback);
        Type localVarReturnType = new TypeToken<QueryHierarchyItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
