/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Describes work item type nam, its icon and color.
 */
@ApiModel(description = "Describes work item type nam, its icon and color.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-21T10:09:21.598267402Z[Etc/UTC]")
public class WorkItemTypeColorAndIcon {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_WORK_ITEM_TYPE_NAME = "workItemTypeName";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_TYPE_NAME)
  private String workItemTypeName;


  public WorkItemTypeColorAndIcon color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * The color of the work item type in hex format.
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The color of the work item type in hex format.")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  public WorkItemTypeColorAndIcon icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * The work item type icon.
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work item type icon.")

  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    this.icon = icon;
  }


  public WorkItemTypeColorAndIcon workItemTypeName(String workItemTypeName) {
    
    this.workItemTypeName = workItemTypeName;
    return this;
  }

   /**
   * The name of the work item type.
   * @return workItemTypeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the work item type.")

  public String getWorkItemTypeName() {
    return workItemTypeName;
  }


  public void setWorkItemTypeName(String workItemTypeName) {
    this.workItemTypeName = workItemTypeName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemTypeColorAndIcon workItemTypeColorAndIcon = (WorkItemTypeColorAndIcon) o;
    return Objects.equals(this.color, workItemTypeColorAndIcon.color) &&
        Objects.equals(this.icon, workItemTypeColorAndIcon.icon) &&
        Objects.equals(this.workItemTypeName, workItemTypeColorAndIcon.workItemTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, icon, workItemTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemTypeColorAndIcon {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    workItemTypeName: ").append(toIndentedString(workItemTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

