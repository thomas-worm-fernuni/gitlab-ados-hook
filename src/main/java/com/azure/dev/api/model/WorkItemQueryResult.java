/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.azure.dev.api.model.WorkItemFieldReference;
import com.azure.dev.api.model.WorkItemLink;
import com.azure.dev.api.model.WorkItemQuerySortColumn;
import com.azure.dev.api.model.WorkItemReference;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * The result of a work item query.
 */
@ApiModel(description = "The result of a work item query.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-21T10:09:21.598267402Z[Etc/UTC]")
public class WorkItemQueryResult {
  public static final String SERIALIZED_NAME_AS_OF = "asOf";
  @SerializedName(SERIALIZED_NAME_AS_OF)
  private OffsetDateTime asOf;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<WorkItemFieldReference> columns = null;

  /**
   * The result type
   */
  @JsonAdapter(QueryResultTypeEnum.Adapter.class)
  public enum QueryResultTypeEnum {
    WORKITEM("workItem"),
    
    WORKITEMLINK("workItemLink");

    private String value;

    QueryResultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryResultTypeEnum fromValue(String value) {
      for (QueryResultTypeEnum b : QueryResultTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryResultTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUERY_RESULT_TYPE = "queryResultType";
  @SerializedName(SERIALIZED_NAME_QUERY_RESULT_TYPE)
  private QueryResultTypeEnum queryResultType;

  /**
   * The type of the query
   */
  @JsonAdapter(QueryTypeEnum.Adapter.class)
  public enum QueryTypeEnum {
    FLAT("flat"),
    
    TREE("tree"),
    
    ONEHOP("oneHop");

    private String value;

    QueryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryTypeEnum fromValue(String value) {
      for (QueryTypeEnum b : QueryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUERY_TYPE = "queryType";
  @SerializedName(SERIALIZED_NAME_QUERY_TYPE)
  private QueryTypeEnum queryType;

  public static final String SERIALIZED_NAME_SORT_COLUMNS = "sortColumns";
  @SerializedName(SERIALIZED_NAME_SORT_COLUMNS)
  private List<WorkItemQuerySortColumn> sortColumns = null;

  public static final String SERIALIZED_NAME_WORK_ITEM_RELATIONS = "workItemRelations";
  @SerializedName(SERIALIZED_NAME_WORK_ITEM_RELATIONS)
  private List<WorkItemLink> workItemRelations = null;

  public static final String SERIALIZED_NAME_WORK_ITEMS = "workItems";
  @SerializedName(SERIALIZED_NAME_WORK_ITEMS)
  private List<WorkItemReference> workItems = null;


  public WorkItemQueryResult asOf(OffsetDateTime asOf) {
    
    this.asOf = asOf;
    return this;
  }

   /**
   * The date the query was run in the context of.
   * @return asOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the query was run in the context of.")

  public OffsetDateTime getAsOf() {
    return asOf;
  }


  public void setAsOf(OffsetDateTime asOf) {
    this.asOf = asOf;
  }


  public WorkItemQueryResult columns(List<WorkItemFieldReference> columns) {
    
    this.columns = columns;
    return this;
  }

  public WorkItemQueryResult addColumnsItem(WorkItemFieldReference columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<WorkItemFieldReference>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * The columns of the query.
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The columns of the query.")

  public List<WorkItemFieldReference> getColumns() {
    return columns;
  }


  public void setColumns(List<WorkItemFieldReference> columns) {
    this.columns = columns;
  }


  public WorkItemQueryResult queryResultType(QueryResultTypeEnum queryResultType) {
    
    this.queryResultType = queryResultType;
    return this;
  }

   /**
   * The result type
   * @return queryResultType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The result type")

  public QueryResultTypeEnum getQueryResultType() {
    return queryResultType;
  }


  public void setQueryResultType(QueryResultTypeEnum queryResultType) {
    this.queryResultType = queryResultType;
  }


  public WorkItemQueryResult queryType(QueryTypeEnum queryType) {
    
    this.queryType = queryType;
    return this;
  }

   /**
   * The type of the query
   * @return queryType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the query")

  public QueryTypeEnum getQueryType() {
    return queryType;
  }


  public void setQueryType(QueryTypeEnum queryType) {
    this.queryType = queryType;
  }


  public WorkItemQueryResult sortColumns(List<WorkItemQuerySortColumn> sortColumns) {
    
    this.sortColumns = sortColumns;
    return this;
  }

  public WorkItemQueryResult addSortColumnsItem(WorkItemQuerySortColumn sortColumnsItem) {
    if (this.sortColumns == null) {
      this.sortColumns = new ArrayList<WorkItemQuerySortColumn>();
    }
    this.sortColumns.add(sortColumnsItem);
    return this;
  }

   /**
   * The sort columns of the query.
   * @return sortColumns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sort columns of the query.")

  public List<WorkItemQuerySortColumn> getSortColumns() {
    return sortColumns;
  }


  public void setSortColumns(List<WorkItemQuerySortColumn> sortColumns) {
    this.sortColumns = sortColumns;
  }


  public WorkItemQueryResult workItemRelations(List<WorkItemLink> workItemRelations) {
    
    this.workItemRelations = workItemRelations;
    return this;
  }

  public WorkItemQueryResult addWorkItemRelationsItem(WorkItemLink workItemRelationsItem) {
    if (this.workItemRelations == null) {
      this.workItemRelations = new ArrayList<WorkItemLink>();
    }
    this.workItemRelations.add(workItemRelationsItem);
    return this;
  }

   /**
   * The work item links returned by the query.
   * @return workItemRelations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work item links returned by the query.")

  public List<WorkItemLink> getWorkItemRelations() {
    return workItemRelations;
  }


  public void setWorkItemRelations(List<WorkItemLink> workItemRelations) {
    this.workItemRelations = workItemRelations;
  }


  public WorkItemQueryResult workItems(List<WorkItemReference> workItems) {
    
    this.workItems = workItems;
    return this;
  }

  public WorkItemQueryResult addWorkItemsItem(WorkItemReference workItemsItem) {
    if (this.workItems == null) {
      this.workItems = new ArrayList<WorkItemReference>();
    }
    this.workItems.add(workItemsItem);
    return this;
  }

   /**
   * The work items returned by the query.
   * @return workItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work items returned by the query.")

  public List<WorkItemReference> getWorkItems() {
    return workItems;
  }


  public void setWorkItems(List<WorkItemReference> workItems) {
    this.workItems = workItems;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemQueryResult workItemQueryResult = (WorkItemQueryResult) o;
    return Objects.equals(this.asOf, workItemQueryResult.asOf) &&
        Objects.equals(this.columns, workItemQueryResult.columns) &&
        Objects.equals(this.queryResultType, workItemQueryResult.queryResultType) &&
        Objects.equals(this.queryType, workItemQueryResult.queryType) &&
        Objects.equals(this.sortColumns, workItemQueryResult.sortColumns) &&
        Objects.equals(this.workItemRelations, workItemQueryResult.workItemRelations) &&
        Objects.equals(this.workItems, workItemQueryResult.workItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asOf, columns, queryResultType, queryType, sortColumns, workItemRelations, workItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemQueryResult {\n");
    sb.append("    asOf: ").append(toIndentedString(asOf)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    queryResultType: ").append(toIndentedString(queryResultType)).append("\n");
    sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
    sb.append("    sortColumns: ").append(toIndentedString(sortColumns)).append("\n");
    sb.append("    workItemRelations: ").append(toIndentedString(workItemRelations)).append("\n");
    sb.append("    workItems: ").append(toIndentedString(workItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

