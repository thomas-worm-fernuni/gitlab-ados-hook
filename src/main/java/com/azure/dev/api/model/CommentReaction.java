/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.azure.dev.api.model.WorkItemTrackingResource;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Contains information about work item comment reaction for a particular reaction type.
 */
@ApiModel(description = "Contains information about work item comment reaction for a particular reaction type.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-21T10:09:21.598267402Z[Etc/UTC]")
public class CommentReaction {
  public static final String SERIALIZED_NAME_COMMENT_ID = "commentId";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  private Integer commentId;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_IS_CURRENT_USER_ENGAGED = "isCurrentUserEngaged";
  @SerializedName(SERIALIZED_NAME_IS_CURRENT_USER_ENGAGED)
  private Boolean isCurrentUserEngaged;

  /**
   * Type of the reaction.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LIKE("like"),
    
    DISLIKE("dislike"),
    
    HEART("heart"),
    
    HOORAY("hooray"),
    
    SMILE("smile"),
    
    CONFUSED("confused");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;


  public CommentReaction commentId(Integer commentId) {
    
    this.commentId = commentId;
    return this;
  }

   /**
   * The id of the comment this reaction belongs to.
   * @return commentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the comment this reaction belongs to.")

  public Integer getCommentId() {
    return commentId;
  }


  public void setCommentId(Integer commentId) {
    this.commentId = commentId;
  }


  public CommentReaction count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Total number of reactions for the CommentReactionType.
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of reactions for the CommentReactionType.")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public CommentReaction isCurrentUserEngaged(Boolean isCurrentUserEngaged) {
    
    this.isCurrentUserEngaged = isCurrentUserEngaged;
    return this;
  }

   /**
   * Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
   * @return isCurrentUserEngaged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).")

  public Boolean getIsCurrentUserEngaged() {
    return isCurrentUserEngaged;
  }


  public void setIsCurrentUserEngaged(Boolean isCurrentUserEngaged) {
    this.isCurrentUserEngaged = isCurrentUserEngaged;
  }


  public CommentReaction type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the reaction.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of the reaction.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CommentReaction url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentReaction commentReaction = (CommentReaction) o;
    return Objects.equals(this.commentId, commentReaction.commentId) &&
        Objects.equals(this.count, commentReaction.count) &&
        Objects.equals(this.isCurrentUserEngaged, commentReaction.isCurrentUserEngaged) &&
        Objects.equals(this.type, commentReaction.type) &&
        Objects.equals(this.url, commentReaction.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentId, count, isCurrentUserEngaged, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentReaction {\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    isCurrentUserEngaged: ").append(toIndentedString(isCurrentUserEngaged)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

