/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.azure.dev.api.model.Comment;
import com.azure.dev.api.model.WorkItemTrackingResource;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a list of work item comments.
 */
@ApiModel(description = "Represents a list of work item comments.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-21T10:09:21.598267402Z[Etc/UTC]")
public class CommentList {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Comment> comments = null;

  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "continuationToken";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  private String continuationToken;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_NEXT_PAGE = "nextPage";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  private String nextPage;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;


  public CommentList comments(List<Comment> comments) {
    
    this.comments = comments;
    return this;
  }

  public CommentList addCommentsItem(Comment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<Comment>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * List of comments in the current batch.
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of comments in the current batch.")

  public List<Comment> getComments() {
    return comments;
  }


  public void setComments(List<Comment> comments) {
    this.comments = comments;
  }


  public CommentList continuationToken(String continuationToken) {
    
    this.continuationToken = continuationToken;
    return this;
  }

   /**
   * A string token that can be used to retrieving next page of comments if available. Otherwise null.
   * @return continuationToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string token that can be used to retrieving next page of comments if available. Otherwise null.")

  public String getContinuationToken() {
    return continuationToken;
  }


  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }


  public CommentList count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * The count of comments in the current batch.
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The count of comments in the current batch.")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public CommentList nextPage(String nextPage) {
    
    this.nextPage = nextPage;
    return this;
  }

   /**
   * Uri to the next page of comments if it is available. Otherwise null.
   * @return nextPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Uri to the next page of comments if it is available. Otherwise null.")

  public String getNextPage() {
    return nextPage;
  }


  public void setNextPage(String nextPage) {
    this.nextPage = nextPage;
  }


  public CommentList totalCount(Integer totalCount) {
    
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Total count of comments on a work item.
   * @return totalCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total count of comments on a work item.")

  public Integer getTotalCount() {
    return totalCount;
  }


  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public CommentList url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentList commentList = (CommentList) o;
    return Objects.equals(this.comments, commentList.comments) &&
        Objects.equals(this.continuationToken, commentList.continuationToken) &&
        Objects.equals(this.count, commentList.count) &&
        Objects.equals(this.nextPage, commentList.nextPage) &&
        Objects.equals(this.totalCount, commentList.totalCount) &&
        Objects.equals(this.url, commentList.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, continuationToken, count, nextPage, totalCount, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentList {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

