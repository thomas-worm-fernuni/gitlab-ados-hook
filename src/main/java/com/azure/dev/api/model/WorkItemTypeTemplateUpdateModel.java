/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Describes a update work item type template request body.
 */
@ApiModel(description = "Describes a update work item type template request body.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-21T10:09:21.598267402Z[Etc/UTC]")
public class WorkItemTypeTemplateUpdateModel {
  /**
   * Describes the type of the action for the update request.
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    IMPORT("import"),
    
    VALIDATE("validate");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION_TYPE = "actionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionTypeEnum actionType;

  public static final String SERIALIZED_NAME_METHODOLOGY = "methodology";
  @SerializedName(SERIALIZED_NAME_METHODOLOGY)
  private String methodology;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  /**
   * The type of the template described in the request body.
   */
  @JsonAdapter(TemplateTypeEnum.Adapter.class)
  public enum TemplateTypeEnum {
    WORKITEMTYPE("workItemType"),
    
    GLOBALWORKFLOW("globalWorkflow");

    private String value;

    TemplateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateTypeEnum fromValue(String value) {
      for (TemplateTypeEnum b : TemplateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemplateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "templateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private TemplateTypeEnum templateType;


  public WorkItemTypeTemplateUpdateModel actionType(ActionTypeEnum actionType) {
    
    this.actionType = actionType;
    return this;
  }

   /**
   * Describes the type of the action for the update request.
   * @return actionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes the type of the action for the update request.")

  public ActionTypeEnum getActionType() {
    return actionType;
  }


  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public WorkItemTypeTemplateUpdateModel methodology(String methodology) {
    
    this.methodology = methodology;
    return this;
  }

   /**
   * Methodology to which the template belongs, eg. Agile, Scrum, CMMI.
   * @return methodology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Methodology to which the template belongs, eg. Agile, Scrum, CMMI.")

  public String getMethodology() {
    return methodology;
  }


  public void setMethodology(String methodology) {
    this.methodology = methodology;
  }


  public WorkItemTypeTemplateUpdateModel template(String template) {
    
    this.template = template;
    return this;
  }

   /**
   * String representation of the work item type template.
   * @return template
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String representation of the work item type template.")

  public String getTemplate() {
    return template;
  }


  public void setTemplate(String template) {
    this.template = template;
  }


  public WorkItemTypeTemplateUpdateModel templateType(TemplateTypeEnum templateType) {
    
    this.templateType = templateType;
    return this;
  }

   /**
   * The type of the template described in the request body.
   * @return templateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the template described in the request body.")

  public TemplateTypeEnum getTemplateType() {
    return templateType;
  }


  public void setTemplateType(TemplateTypeEnum templateType) {
    this.templateType = templateType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkItemTypeTemplateUpdateModel workItemTypeTemplateUpdateModel = (WorkItemTypeTemplateUpdateModel) o;
    return Objects.equals(this.actionType, workItemTypeTemplateUpdateModel.actionType) &&
        Objects.equals(this.methodology, workItemTypeTemplateUpdateModel.methodology) &&
        Objects.equals(this.template, workItemTypeTemplateUpdateModel.template) &&
        Objects.equals(this.templateType, workItemTypeTemplateUpdateModel.templateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, methodology, template, templateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkItemTypeTemplateUpdateModel {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    methodology: ").append(toIndentedString(methodology)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

