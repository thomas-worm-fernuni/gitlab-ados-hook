/*
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.azure.dev.api;

import com.azure.dev.api.ApiCallback;
import com.azure.dev.api.ApiClient;
import com.azure.dev.api.ApiException;
import com.azure.dev.api.ApiResponse;
import com.azure.dev.api.Configuration;
import com.azure.dev.api.Pair;
import com.azure.dev.api.ProgressRequestBody;
import com.azure.dev.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.azure.dev.api.model.WorkItemClassificationNode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClassificationNodesApi {
    private ApiClient localVarApiClient;

    public ClassificationNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClassificationNodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for classificationNodesCreateOrUpdate
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesCreateOrUpdateCall(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "structureGroup" + "\\}", localVarApiClient.escapeString(structureGroup.toString()))
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classificationNodesCreateOrUpdateValidateBeforeCall(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling classificationNodesCreateOrUpdate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling classificationNodesCreateOrUpdate(Async)");
        }
        
        // verify the required parameter 'structureGroup' is set
        if (structureGroup == null) {
            throw new ApiException("Missing the required parameter 'structureGroup' when calling classificationNodesCreateOrUpdate(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling classificationNodesCreateOrUpdate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling classificationNodesCreateOrUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classificationNodesCreateOrUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = classificationNodesCreateOrUpdateCall(organization, project, structureGroup, path, apiVersion, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create new or update an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @return WorkItemClassificationNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WorkItemClassificationNode classificationNodesCreateOrUpdate(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body) throws ApiException {
        ApiResponse<WorkItemClassificationNode> localVarResp = classificationNodesCreateOrUpdateWithHttpInfo(organization, project, structureGroup, path, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new or update an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @return ApiResponse&lt;WorkItemClassificationNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkItemClassificationNode> classificationNodesCreateOrUpdateWithHttpInfo(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body) throws ApiException {
        okhttp3.Call localVarCall = classificationNodesCreateOrUpdateValidateBeforeCall(organization, project, structureGroup, path, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<WorkItemClassificationNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new or update an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesCreateOrUpdateAsync(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body, final ApiCallback<WorkItemClassificationNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = classificationNodesCreateOrUpdateValidateBeforeCall(organization, project, structureGroup, path, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<WorkItemClassificationNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classificationNodesDelete
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $reclassifyId Id of the target classification node for reclassification. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesDeleteCall(String organization, String project, String structureGroup, String path, String apiVersion, Integer $reclassifyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "structureGroup" + "\\}", localVarApiClient.escapeString(structureGroup.toString()))
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($reclassifyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$reclassifyId", $reclassifyId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classificationNodesDeleteValidateBeforeCall(String organization, String project, String structureGroup, String path, String apiVersion, Integer $reclassifyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling classificationNodesDelete(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling classificationNodesDelete(Async)");
        }
        
        // verify the required parameter 'structureGroup' is set
        if (structureGroup == null) {
            throw new ApiException("Missing the required parameter 'structureGroup' when calling classificationNodesDelete(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling classificationNodesDelete(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling classificationNodesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = classificationNodesDeleteCall(organization, project, structureGroup, path, apiVersion, $reclassifyId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $reclassifyId Id of the target classification node for reclassification. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void classificationNodesDelete(String organization, String project, String structureGroup, String path, String apiVersion, Integer $reclassifyId) throws ApiException {
        classificationNodesDeleteWithHttpInfo(organization, project, structureGroup, path, apiVersion, $reclassifyId);
    }

    /**
     * 
     * Delete an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $reclassifyId Id of the target classification node for reclassification. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> classificationNodesDeleteWithHttpInfo(String organization, String project, String structureGroup, String path, String apiVersion, Integer $reclassifyId) throws ApiException {
        okhttp3.Call localVarCall = classificationNodesDeleteValidateBeforeCall(organization, project, structureGroup, path, apiVersion, $reclassifyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $reclassifyId Id of the target classification node for reclassification. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesDeleteAsync(String organization, String project, String structureGroup, String path, String apiVersion, Integer $reclassifyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = classificationNodesDeleteValidateBeforeCall(organization, project, structureGroup, path, apiVersion, $reclassifyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for classificationNodesGet
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesGetCall(String organization, String project, String structureGroup, String path, String apiVersion, Integer $depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "structureGroup" + "\\}", localVarApiClient.escapeString(structureGroup.toString()))
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$depth", $depth));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classificationNodesGetValidateBeforeCall(String organization, String project, String structureGroup, String path, String apiVersion, Integer $depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling classificationNodesGet(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling classificationNodesGet(Async)");
        }
        
        // verify the required parameter 'structureGroup' is set
        if (structureGroup == null) {
            throw new ApiException("Missing the required parameter 'structureGroup' when calling classificationNodesGet(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling classificationNodesGet(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling classificationNodesGet(Async)");
        }
        

        okhttp3.Call localVarCall = classificationNodesGetCall(organization, project, structureGroup, path, apiVersion, $depth, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the classification node for a given node path.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @return WorkItemClassificationNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WorkItemClassificationNode classificationNodesGet(String organization, String project, String structureGroup, String path, String apiVersion, Integer $depth) throws ApiException {
        ApiResponse<WorkItemClassificationNode> localVarResp = classificationNodesGetWithHttpInfo(organization, project, structureGroup, path, apiVersion, $depth);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the classification node for a given node path.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @return ApiResponse&lt;WorkItemClassificationNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkItemClassificationNode> classificationNodesGetWithHttpInfo(String organization, String project, String structureGroup, String path, String apiVersion, Integer $depth) throws ApiException {
        okhttp3.Call localVarCall = classificationNodesGetValidateBeforeCall(organization, project, structureGroup, path, apiVersion, $depth, null);
        Type localVarReturnType = new TypeToken<WorkItemClassificationNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the classification node for a given node path.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesGetAsync(String organization, String project, String structureGroup, String path, String apiVersion, Integer $depth, final ApiCallback<WorkItemClassificationNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = classificationNodesGetValidateBeforeCall(organization, project, structureGroup, path, apiVersion, $depth, _callback);
        Type localVarReturnType = new TypeToken<WorkItemClassificationNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classificationNodesGetRootNodes
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesGetRootNodesCall(String organization, String project, String apiVersion, Integer $depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/classificationnodes"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$depth", $depth));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classificationNodesGetRootNodesValidateBeforeCall(String organization, String project, String apiVersion, Integer $depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling classificationNodesGetRootNodes(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling classificationNodesGetRootNodes(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling classificationNodesGetRootNodes(Async)");
        }
        

        okhttp3.Call localVarCall = classificationNodesGetRootNodesCall(organization, project, apiVersion, $depth, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets root classification nodes under the project.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @return List&lt;WorkItemClassificationNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkItemClassificationNode> classificationNodesGetRootNodes(String organization, String project, String apiVersion, Integer $depth) throws ApiException {
        ApiResponse<List<WorkItemClassificationNode>> localVarResp = classificationNodesGetRootNodesWithHttpInfo(organization, project, apiVersion, $depth);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets root classification nodes under the project.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @return ApiResponse&lt;List&lt;WorkItemClassificationNode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkItemClassificationNode>> classificationNodesGetRootNodesWithHttpInfo(String organization, String project, String apiVersion, Integer $depth) throws ApiException {
        okhttp3.Call localVarCall = classificationNodesGetRootNodesValidateBeforeCall(organization, project, apiVersion, $depth, null);
        Type localVarReturnType = new TypeToken<List<WorkItemClassificationNode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets root classification nodes under the project.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param $depth Depth of children to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesGetRootNodesAsync(String organization, String project, String apiVersion, Integer $depth, final ApiCallback<List<WorkItemClassificationNode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = classificationNodesGetRootNodesValidateBeforeCall(organization, project, apiVersion, $depth, _callback);
        Type localVarReturnType = new TypeToken<List<WorkItemClassificationNode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classificationNodesUpdate
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesUpdateCall(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organization}/{project}/_apis/wit/classificationnodes/{structureGroup}/{path}"
            .replaceAll("\\{" + "organization" + "\\}", localVarApiClient.escapeString(organization.toString()))
            .replaceAll("\\{" + "project" + "\\}", localVarApiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "structureGroup" + "\\}", localVarApiClient.escapeString(structureGroup.toString()))
            .replaceAll("\\{" + "path" + "\\}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classificationNodesUpdateValidateBeforeCall(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling classificationNodesUpdate(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling classificationNodesUpdate(Async)");
        }
        
        // verify the required parameter 'structureGroup' is set
        if (structureGroup == null) {
            throw new ApiException("Missing the required parameter 'structureGroup' when calling classificationNodesUpdate(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling classificationNodesUpdate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling classificationNodesUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classificationNodesUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = classificationNodesUpdateCall(organization, project, structureGroup, path, apiVersion, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @return WorkItemClassificationNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WorkItemClassificationNode classificationNodesUpdate(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body) throws ApiException {
        ApiResponse<WorkItemClassificationNode> localVarResp = classificationNodesUpdateWithHttpInfo(organization, project, structureGroup, path, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @return ApiResponse&lt;WorkItemClassificationNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkItemClassificationNode> classificationNodesUpdateWithHttpInfo(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body) throws ApiException {
        okhttp3.Call localVarCall = classificationNodesUpdateValidateBeforeCall(organization, project, structureGroup, path, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<WorkItemClassificationNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing classification node.
     * @param organization The name of the Azure DevOps organization. (required)
     * @param project Project ID or project name (required)
     * @param structureGroup Structure group of the classification node, area or iteration. (required)
     * @param path Path of the classification node. (required)
     * @param apiVersion Version of the API to use.  This should be set to &#39;6.1-preview.2&#39; to use this version of the api. (required)
     * @param body Node to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classificationNodesUpdateAsync(String organization, String project, String structureGroup, String path, String apiVersion, WorkItemClassificationNode body, final ApiCallback<WorkItemClassificationNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = classificationNodesUpdateValidateBeforeCall(organization, project, structureGroup, path, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<WorkItemClassificationNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
